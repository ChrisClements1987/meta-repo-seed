# Project configuration for {{PROJECT_NAME}}
# Generated by Meta-Repo Seeding System

[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "{{PROJECT_NAME}}"
description = "Business-in-a-Box project generated by Meta-Repo Seeding System"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "{{GITHUB_USERNAME}}", email = "{{GITHUB_USERNAME}}@example.com"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10", 
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.9"
dynamic = ["version"]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "black>=24.0",
    "isort>=5.12",
    "flake8>=7.0",
    "pre-commit>=3.0",
    "pydocstyle>=6.3",
    "bandit>=1.7",
]

[project.urls]
Homepage = "https://github.com/{{GITHUB_USERNAME}}/{{PROJECT_NAME}}"
Repository = "https://github.com/{{GITHUB_USERNAME}}/{{PROJECT_NAME}}.git"
Documentation = "https://{{PROJECT_NAME}}.readthedocs.io"
"Bug Tracker" = "https://github.com/{{GITHUB_USERNAME}}/{{PROJECT_NAME}}/issues"

# Tool configurations
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["{{PROJECT_NAME}}"]
known_third_party = []
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:D",
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".pytest_cache",
]

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104", "D105", "D107"]
match-dir = "^(?!(tests|__pycache__|build|dist|\\.)).*"

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow running tests",
    "network: Tests requiring network access",
]

[tool.coverage.run]
source = ["src", "."]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "venv/*",
    ".venv/*",
    "__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\(Protocol\):",
    "@(abc\\.)?abstractmethod",
]

[tool.setuptools_scm]
write_to = "src/_version.py"
write_to_template = '__version__ = "{version}"'
