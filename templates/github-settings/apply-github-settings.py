#!/usr/bin/env python3
"""
GitHub Repository Settings Automation Script for {{PROJECT_NAME}}
Generated by Meta-Repo Seeding System

This script applies repository settings, branch protection rules, and labels
to GitHub repositories using the GitHub CLI and API.

Usage:
    python apply-github-settings.py [options]
    
Options:
    --repository      Target repository (default: {{GITHUB_USERNAME}}/{{PROJECT_NAME}})
    --settings-only   Apply only repository settings (skip labels and workflows)
    --labels-only     Apply only label configurations
    --dry-run        Show what would be done without making changes
    --verbose        Show detailed output
"""

import argparse
import json
import subprocess
import sys
import yaml
from pathlib import Path


def run_command(cmd, dry_run=False, verbose=False):
    """Run a shell command with error handling."""
    if verbose:
        print(f"[CMD] {cmd}")
    
    if dry_run:
        print(f"[DRY RUN] Would run: {cmd}")
        return True, ""
        
    try:
        # Split command for security (avoid shell=True)
        if isinstance(cmd, str):
            import shlex
            cmd_list = shlex.split(cmd)
        else:
            cmd_list = cmd
            
        result = subprocess.run(
            cmd_list, 
            check=True, 
            capture_output=True,
            text=True
        )
        if verbose and result.stdout:
            print(result.stdout)
        return True, result.stdout
    except subprocess.CalledProcessError as e:
        print(f"[ERROR] Command failed: {cmd}")
        print(f"Exit code: {e.returncode}")
        if e.stderr:
            print(f"Error output: {e.stderr}")
        return False, e.stderr


def check_github_cli():
    """Ensure GitHub CLI is available and authenticated."""
    print("[CHECK] Verifying GitHub CLI...")
    
    # Check if gh is installed
    success, _ = run_command("gh --version", verbose=False)
    if not success:
        print("[ERROR] GitHub CLI (gh) is not installed")
        print("Install from: https://cli.github.com/")
        return False
    
    # Check if authenticated
    success, output = run_command("gh auth status", verbose=False)
    if not success:
        print("[ERROR] GitHub CLI is not authenticated")
        print("Run: gh auth login")
        return False
    
    print("[SUCCESS] GitHub CLI is ready")
    return True


def apply_repository_settings(repo, settings_file, dry_run=False, verbose=False):
    """Apply repository settings from YAML configuration."""
    print(f"[SETTINGS] Applying repository settings to {repo}...")
    
    if not settings_file.exists():
        print(f"[ERROR] Settings file not found: {settings_file}")
        return False
    
    try:
        with open(settings_file, 'r') as f:
            settings = yaml.safe_load(f)
    except Exception as e:
        print(f"[ERROR] Failed to parse settings file: {e}")
        return False
    
    # Apply basic repository settings
    basic_settings = {
        'description': settings.get('description', ''),
        'homepage': settings.get('homepage', ''),
        'private': settings.get('private', False),
        'has_issues': settings.get('has_issues', True),
        'has_projects': settings.get('has_projects', True),
        'has_wiki': settings.get('has_wiki', True),
        'default_branch': settings.get('default_branch', 'main'),
        'allow_squash_merge': settings.get('allow_squash_merge', True),
        'allow_merge_commit': settings.get('allow_merge_commit', False),
        'allow_rebase_merge': settings.get('allow_rebase_merge', True),
        'delete_branch_on_merge': settings.get('delete_branch_on_merge', True),
    }
    
    # Convert to GitHub CLI format
    cli_args = []
    for key, value in basic_settings.items():
        if isinstance(value, bool):
            cli_args.append(f"--{key.replace('_', '-')}={str(value).lower()}")
        else:
            cli_args.append(f"--{key.replace('_', '-')}='{value}'")
    
    cmd = f"gh repo edit {repo} {' '.join(cli_args)}"
    success, _ = run_command(cmd, dry_run, verbose)
    
    if success and not dry_run:
        print("[SUCCESS] Repository settings applied")
    
    return success


def apply_branch_protection(repo, settings_file, dry_run=False, verbose=False):
    """Apply branch protection rules from settings configuration."""
    print(f"[PROTECTION] Applying branch protection rules to {repo}...")
    
    if not settings_file.exists():
        print(f"[ERROR] Settings file not found: {settings_file}")
        return False
    
    try:
        with open(settings_file, 'r') as f:
            settings = yaml.safe_load(f)
    except Exception as e:
        print(f"[ERROR] Failed to parse settings file: {e}")
        return False
    
    branches = settings.get('branches', [])
    for branch_config in branches:
        branch_name = branch_config.get('name')
        protection = branch_config.get('protection', {})
        
        if not branch_name:
            continue
            
        print(f"[PROTECTION] Configuring protection for branch: {branch_name}")
        
        # Build protection configuration
        protection_data = {
            'required_status_checks': protection.get('required_status_checks'),
            'enforce_admins': protection.get('enforce_admins', True),
            'required_pull_request_reviews': protection.get('required_pull_request_reviews'),
            'restrictions': None,
            'allow_force_pushes': protection.get('allow_force_pushes', False),
            'allow_deletions': protection.get('allow_deletions', False),
            'required_conversation_resolution': protection.get('required_conversation_resolution', True)
        }
        
        # Apply via GitHub API
        api_endpoint = f"repos/{repo}/branches/{branch_name}/protection"
        
        if dry_run:
            print(f"[DRY RUN] Would apply protection to {branch_name}: {protection_data}")
            continue
            
        # Create temporary JSON file for the API call
        temp_file = Path(f"temp_protection_{branch_name}.json")
        try:
            with open(temp_file, 'w') as f:
                json.dump(protection_data, f, indent=2)
            
            cmd = f"gh api {api_endpoint} --method PUT --input {temp_file}"
            success, _ = run_command(cmd, dry_run, verbose)
            
            if success:
                print(f"[SUCCESS] Protection applied to {branch_name}")
            else:
                print(f"[WARNING] Failed to apply protection to {branch_name}")
                
        finally:
            if temp_file.exists():
                temp_file.unlink()
    
    return True


def apply_repository_labels(repo, labels_file, dry_run=False, verbose=False):
    """Apply repository labels from YAML configuration."""
    print(f"[LABELS] Applying repository labels to {repo}...")
    
    if not labels_file.exists():
        print(f"[ERROR] Labels file not found: {labels_file}")
        return False
    
    try:
        with open(labels_file, 'r') as f:
            labels = yaml.safe_load(f)
    except Exception as e:
        print(f"[ERROR] Failed to parse labels file: {e}")
        return False
    
    if not isinstance(labels, list):
        print("[ERROR] Labels file should contain a list of label definitions")
        return False
    
    success = True
    for label in labels:
        name = label.get('name')
        description = label.get('description', '')
        color = label.get('color', 'CCCCCC')
        
        if not name:
            continue
            
        if dry_run:
            print(f"[DRY RUN] Would create/update label: {name}")
            continue
        
        # Create or update label
        cmd = f"gh label create '{name}' --description '{description}' --color {color} --force"
        label_success, _ = run_command(cmd, dry_run, verbose)
        
        if label_success:
            if verbose:
                print(f"[SUCCESS] Label applied: {name}")
        else:
            print(f"[WARNING] Failed to apply label: {name}")
            success = False
    
    if success and not dry_run:
        print("[SUCCESS] All repository labels applied")
    
    return success


def main():
    """Main function for applying GitHub repository settings."""
    parser = argparse.ArgumentParser(
        description="Apply GitHub repository settings as code for {{PROJECT_NAME}}"
    )
    parser.add_argument("--repository", default="{{GITHUB_USERNAME}}/{{PROJECT_NAME}}",
                       help="Target repository (default: {{GITHUB_USERNAME}}/{{PROJECT_NAME}})")
    parser.add_argument("--settings-only", action="store_true",
                       help="Apply only repository settings (skip labels)")
    parser.add_argument("--labels-only", action="store_true",
                       help="Apply only label configurations")
    parser.add_argument("--dry-run", action="store_true",
                       help="Show what would be done without making changes")
    parser.add_argument("--verbose", action="store_true",
                       help="Show detailed output")
    
    args = parser.parse_args()
    
    print("[GITHUB] Repository Settings Automation for {{PROJECT_NAME}}")
    print("=" * 60)
    
    # Check GitHub CLI availability
    if not check_github_cli():
        sys.exit(1)
    
    # Get configuration file paths
    script_dir = Path(__file__).parent.parent
    settings_file = script_dir / ".github" / "repository-settings.yml"
    labels_file = script_dir / ".github" / "labels.yml"
    
    success = True
    
    # Apply repository settings (unless labels-only)
    if not args.labels_only:
        success = success and apply_repository_settings(args.repository, settings_file, args.dry_run, args.verbose)
        success = success and apply_branch_protection(args.repository, settings_file, args.dry_run, args.verbose)
    
    # Apply labels (unless settings-only)
    if not args.settings_only:
        success = success and apply_repository_labels(args.repository, labels_file, args.dry_run, args.verbose)
    
    print("\n" + "=" * 60)
    if success:
        print("[SUCCESS] GitHub repository settings automation completed!")
        print("\n[NEXT STEPS]:")
        print("1. Verify settings in GitHub repository")
        print("2. Test branch protection rules with a test PR")
        print("3. Customize labels and settings as needed")
        print("\n[MANUAL COMMANDS]:")
        print(f"  - Check repository: gh repo view {args.repository}")
        print(f"  - List labels: gh label list")
        print(f"  - View branch protection: gh api repos/{args.repository}/branches/main/protection")
    else:
        print("[ERROR] Some GitHub settings failed to apply. Check the error messages above.")
        sys.exit(1)


if __name__ == "__main__":
    main()
