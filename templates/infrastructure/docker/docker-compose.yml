# {{PROJECT_NAME}} Development Docker Compose
# Local development environment with all services
# Use: docker-compose up -d

version: '3.8'

services:
  # Main Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        - BUILD_DATE=${BUILD_DATE}
        - VCS_REF=${VCS_REF}
        - VERSION=${VERSION}
    image: {{GITHUB_USERNAME}}/{{PROJECT_NAME}}:dev
    container_name: {{PROJECT_NAME}}-app-dev
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8080:8080" # Metrics port
      - "9229:9229" # Debug port
    environment:
      - NODE_ENV=development
      - APP_NAME={{PROJECT_NAME}}
      - PORT=8000
      - METRICS_PORT=8080
      - DATABASE_URL=mysql://root:rootpassword@db:3306/{{PROJECT_NAME}}
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=debug
      - DEBUG=true
    volumes:
      - .:/app
      - /app/node_modules
      - app-logs:/app/logs
      - app-uploads:/app/uploads
    depends_on:
      - db
      - redis
      - mailhog
    networks:
      - {{PROJECT_NAME}}-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.{{PROJECT_NAME}}-app.rule=Host(`{{PROJECT_NAME}}.localhost`)"
      - "traefik.http.routers.{{PROJECT_NAME}}-app.entrypoints=web"
      - "traefik.http.services.{{PROJECT_NAME}}-app.loadbalancer.server.port=8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database
  db:
    image: mysql:8.0
    container_name: {{PROJECT_NAME}}-db-dev
    restart: unless-stopped
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE={{PROJECT_NAME}}
      - MYSQL_USER={{PROJECT_NAME}}_user
      - MYSQL_PASSWORD=userpassword
      - MYSQL_CHARSET=utf8mb4
      - MYSQL_COLLATION=utf8mb4_unicode_ci
    volumes:
      - db-data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/custom.cnf:ro
    networks:
      - {{PROJECT_NAME}}-network
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-prootpassword"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: {{PROJECT_NAME}}-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=redispassword
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - {{PROJECT_NAME}}-network
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass redispassword
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redispassword", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mail Server (Development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: {{PROJECT_NAME}}-mailhog-dev
    restart: unless-stopped
    ports:
      - "1025:1025" # SMTP port
      - "8025:8025" # Web UI port
    networks:
      - {{PROJECT_NAME}}-network
    environment:
      - MH_STORAGE=maildir
      - MH_MAILDIR_PATH=/maildir
    volumes:
      - mailhog-data:/maildir

  # Reverse Proxy / Load Balancer
  traefik:
    image: traefik:v2.10
    container_name: {{PROJECT_NAME}}-traefik-dev
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    environment:
      - TRAEFIK_API_DASHBOARD=true
      - TRAEFIK_API_INSECURE=true
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_DOCKER_EXPOSEDBYDEFAULT=false
      - TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./docker/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./docker/traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - traefik-certs:/certs
    networks:
      - {{PROJECT_NAME}}-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"

  # Database Administration
  adminer:
    image: adminer:latest
    container_name: {{PROJECT_NAME}}-adminer-dev
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=db
      - ADMINER_DESIGN=pepa-linha
    networks:
      - {{PROJECT_NAME}}-network
    depends_on:
      - db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`adminer.localhost`)"
      - "traefik.http.routers.adminer.entrypoints=web"

  # Redis Administration
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: {{PROJECT_NAME}}-redis-commander-dev
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379:0:redispassword
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    networks:
      - {{PROJECT_NAME}}-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis-commander.rule=Host(`redis.localhost`)"
      - "traefik.http.routers.redis-commander.entrypoints=web"

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: {{PROJECT_NAME}}-prometheus-dev
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - {{PROJECT_NAME}}-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.routers.prometheus.entrypoints=web"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: {{PROJECT_NAME}}-grafana-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - {{PROJECT_NAME}}-network
    depends_on:
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.routers.grafana.entrypoints=web"

  # Log Management - Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: {{PROJECT_NAME}}-elasticsearch-dev
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - {{PROJECT_NAME}}-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Log Management - Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: {{PROJECT_NAME}}-kibana-dev
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
    networks:
      - {{PROJECT_NAME}}-network
    depends_on:
      - elasticsearch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.localhost`)"
      - "traefik.http.routers.kibana.entrypoints=web"

# Networks
networks:
  {{PROJECT_NAME}}-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  db-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  app-uploads:
    driver: local
  mailhog-data:
    driver: local
  traefik-certs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local

# Development Scripts
x-development-scripts: &development-scripts
  # Quick start development environment
  dev-up: docker-compose up -d app db redis
  dev-down: docker-compose down
  dev-logs: docker-compose logs -f app
  dev-shell: docker-compose exec app sh
  dev-db-shell: docker-compose exec db mysql -u root -prootpassword {{PROJECT_NAME}}
  dev-redis-shell: docker-compose exec redis redis-cli -a redispassword
  
  # Monitoring and debugging
  dev-full: docker-compose up -d
  dev-monitoring: docker-compose up -d prometheus grafana
  dev-logs-stack: docker-compose up -d elasticsearch kibana
  
  # Database operations
  dev-db-backup: docker-compose exec db mysqldump -u root -prootpassword {{PROJECT_NAME}} > backup.sql
  dev-db-restore: docker-compose exec -T db mysql -u root -prootpassword {{PROJECT_NAME}} < backup.sql
  
  # Cleanup
  dev-clean: docker-compose down -v --remove-orphans
  dev-reset: docker-compose down -v --remove-orphans && docker-compose up -d
