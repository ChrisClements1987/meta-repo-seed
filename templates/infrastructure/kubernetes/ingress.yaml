# {{PROJECT_NAME}} Kubernetes Ingress Configuration
# Production-ready ingress with SSL termination and security features
# Supports multiple ingress controllers (nginx, traefik, aws-load-balancer-controller)

# Main Application Ingress (NGINX)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{PROJECT_NAME}}-ingress
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
    ingress-controller: nginx
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-regex: "true"
    
    # Security annotations
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://{{PROJECT_NAME}}.com"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit-connections: "100"
    nginx.ingress.kubernetes.io/rate-limit-requests-per-minute: "1000"
    
    # SSL/TLS configuration
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-SHA256,ECDHE-RSA-AES256-SHA384"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    
    # Performance optimizations
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Health checks
    nginx.ingress.kubernetes.io/healthcheck-path: "/health"
    
    # Additional security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:";
spec:
  tls:
  - hosts:
    - {{PROJECT_NAME}}.com
    - www.{{PROJECT_NAME}}.com
    - api.{{PROJECT_NAME}}.com
    secretName: {{PROJECT_NAME}}-tls-secret
  rules:
  - host: {{PROJECT_NAME}}.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{PROJECT_NAME}}-service
            port:
              number: 80
  - host: www.{{PROJECT_NAME}}.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{PROJECT_NAME}}-service
            port:
              number: 80
  - host: api.{{PROJECT_NAME}}.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{PROJECT_NAME}}-service
            port:
              number: 80
---
# AWS Load Balancer Controller Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{PROJECT_NAME}}-alb-ingress
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
    ingress-controller: aws-load-balancer
  annotations:
    # AWS Load Balancer Controller annotations
    kubernetes.io/ingress.class: "alb"
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/load-balancer-name: {{PROJECT_NAME}}-alb
    
    # SSL configuration
    alb.ingress.kubernetes.io/ssl-redirect: "443"
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    
    # Health checks
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-path: /health
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
    alb.ingress.kubernetes.io/healthy-threshold-count: "2"
    alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
    
    # Security groups
    alb.ingress.kubernetes.io/security-groups: "sg-12345678"
    alb.ingress.kubernetes.io/subnets: "subnet-12345678,subnet-87654321"
    
    # WAF integration
    alb.ingress.kubernetes.io/wafv2-acl-arn: "arn:aws:wafv2:us-east-1:123456789012:regional/webacl/{{PROJECT_NAME}}-waf/12345678-1234-1234-1234-123456789012"
    
    # Tags
    alb.ingress.kubernetes.io/tags: "Project={{PROJECT_NAME}},Environment=production,ManagedBy=kubernetes"
spec:
  rules:
  - host: {{PROJECT_NAME}}.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{PROJECT_NAME}}-service
            port:
              number: 80
---
# Traefik Ingress (alternative)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{PROJECT_NAME}}-traefik-ingress
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
    ingress-controller: traefik
  annotations:
    # Traefik annotations
    kubernetes.io/ingress.class: "traefik"
    traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.tls.certresolver: letsencrypt
    
    # Middleware for security and performance
    traefik.ingress.kubernetes.io/router.middlewares: {{PROJECT_NAME}}-security@kubernetescrd,{{PROJECT_NAME}}-compress@kubernetescrd,{{PROJECT_NAME}}-ratelimit@kubernetescrd
    
    # Priority
    traefik.ingress.kubernetes.io/router.priority: "100"
spec:
  tls:
  - hosts:
    - {{PROJECT_NAME}}.com
    - www.{{PROJECT_NAME}}.com
    secretName: {{PROJECT_NAME}}-traefik-tls
  rules:
  - host: {{PROJECT_NAME}}.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{PROJECT_NAME}}-service
            port:
              number: 80
---
# TLS Certificate (Cert-Manager)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{PROJECT_NAME}}-certificate
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
spec:
  secretName: {{PROJECT_NAME}}-tls-secret
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - {{PROJECT_NAME}}.com
  - www.{{PROJECT_NAME}}.com
  - api.{{PROJECT_NAME}}.com
  acme:
    config:
    - http01:
        ingressClass: nginx
      domains:
      - {{PROJECT_NAME}}.com
      - www.{{PROJECT_NAME}}.com
      - api.{{PROJECT_NAME}}.com
---
# Traefik Middleware for Security Headers
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: {{PROJECT_NAME}}-security
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
spec:
  headers:
    frameDeny: true
    contentTypeNosniff: true
    browserXssFilter: true
    referrerPolicy: "strict-origin-when-cross-origin"
    customRequestHeaders:
      X-Forwarded-Proto: "https"
    customResponseHeaders:
      X-Frame-Options: "DENY"
      X-Content-Type-Options: "nosniff"
      X-XSS-Protection: "1; mode=block"
      Strict-Transport-Security: "max-age=31536000; includeSubDomains; preload"
      Content-Security-Policy: "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval' https:; style-src 'self' 'unsafe-inline' https:"
---
# Traefik Middleware for Compression
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: {{PROJECT_NAME}}-compress
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
spec:
  compress: {}
---
# Traefik Middleware for Rate Limiting
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: {{PROJECT_NAME}}-ratelimit
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
spec:
  rateLimit:
    average: 100
    period: 1m
    burst: 200
    sourceCriterion:
      ipStrategy:
        depth: 1
