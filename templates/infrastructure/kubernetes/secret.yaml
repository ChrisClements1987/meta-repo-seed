# {{PROJECT_NAME}} Kubernetes Secrets
# Sensitive configuration data for {{PROJECT_NAME}} application
# Values should be base64 encoded or managed by external secret management systems

# Main Application Secrets
apiVersion: v1
kind: Secret
metadata:
  name: {{PROJECT_NAME}}-secrets
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
    secret-type: application
  annotations:
    description: "Main secrets for {{PROJECT_NAME}} application"
    kubernetes.io/service-account.name: {{PROJECT_NAME}}-service-account
type: Opaque
data:
  # Database Credentials (base64 encoded)
  # echo -n 'actual_password' | base64
  database-url: cG9zdGdyZXM6Ly91c2VyOnBhc3N3b3JkQGhvc3Q6NTQzMi9kYXRhYmFzZQ==
  database-username: YWRtaW4=
  database-password: Y2hhbmdlLW1lLWluLXByb2R1Y3Rpb24=
  
  # API Keys and Tokens
  api-key: eW91ci1hcGkta2V5LWhlcmU=
  jwt-secret: c3VwZXItc2VjcmV0LWp3dC1rZXktY2hhbmdlLW1l
  encryption-key: ZW5jcnlwdGlvbi1rZXktMzItY2hhcnMtbG9uZw==
  
  # Third-party Service Credentials
  aws-access-key-id: QUtJQUlPU0ZPRE5ON0VYQU1QTEU=
  aws-secret-access-key: d0phbHJYVXRuRkVNSS9LN01ERU5HL2JQeFJmaUN5RVhBTVBMRUtFWQ==
  redis-password: cmVkaXMtcGFzc3dvcmQtY2hhbmdlLW1l
  
  # OAuth Credentials
  oauth-client-id: eW91ci1vYXV0aC1jbGllbnQtaWQ=
  oauth-client-secret: eW91ci1vYXV0aC1jbGllbnQtc2VjcmV0
  
  # SMTP Credentials
  smtp-username: c210cC11c2VybmFtZQ==
  smtp-password: c210cC1wYXNzd29yZA==
  
  # Additional secrets as needed
  webhook-secret: d2ViaG9vay1zZWNyZXQtdG9rZW4=
  session-secret: c2Vzc2lvbi1zZWNyZXQta2V5LWNoYW5nZS1tZQ==
---
# Database Connection Secrets
apiVersion: v1
kind: Secret
metadata:
  name: {{PROJECT_NAME}}-db-secrets
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
    secret-type: database
  annotations:
    description: "Database connection secrets for {{PROJECT_NAME}}"
type: Opaque
data:
  # Primary Database
  db-host: ZGF0YWJhc2UuZXhhbXBsZS5jb20=
  db-port: MzMwNg==
  db-name: cHJvamVjdF9kYg==
  db-username: ZGJfdXNlcg==
  db-password: ZGJfcGFzc3dvcmRfY2hhbmdlX21l
  
  # Read Replica Database
  db-read-host: ZGF0YWJhc2UtcmVhZC5leGFtcGxlLmNvbQ==
  db-read-username: ZGJfcmVhZF91c2Vy
  db-read-password: ZGJfcmVhZF9wYXNzd29yZF9jaGFuZ2VfbWU=
  
  # Connection Strings
  database-url: bXlzcWw6Ly9kYl91c2VyOmRiX3Bhc3N3b3JkX2NoYW5nZV9tZUBkYXRhYmFzZS5leGFtcGxlLmNvbTozMzA2L3Byb2plY3RfZGI=
  database-read-url: bXlzcWw6Ly9kYl9yZWFkX3VzZXI6ZGJfcmVhZF9wYXNzd29yZF9jaGFuZ2VfbWVAZGF0YWJhc2UtcmVhZC5leGFtcGxlLmNvbTozMzA2L3Byb2plY3RfZGI=
---
# TLS/SSL Certificates
apiVersion: v1
kind: Secret
metadata:
  name: {{PROJECT_NAME}}-tls-secret
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
    secret-type: tls
  annotations:
    description: "TLS certificates for {{PROJECT_NAME}}"
    cert-manager.io/issuer-name: "letsencrypt-prod"
type: kubernetes.io/tls
data:
  # TLS certificate and key (base64 encoded PEM format)
  # These would typically be managed by cert-manager
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...
---
# Docker Registry Secrets
apiVersion: v1
kind: Secret
metadata:
  name: {{PROJECT_NAME}}-registry-secret
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
    secret-type: docker-registry
  annotations:
    description: "Docker registry credentials for {{PROJECT_NAME}}"
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5leGFtcGxlLmNvbSI6eyJ1c2VybmFtZSI6InJlZ2lzdHJ5X3VzZXIiLCJwYXNzd29yZCI6InJlZ2lzdHJ5X3Bhc3N3b3JkIiwiYXV0aCI6ImNtVm5hWE4wY25sZmRYTmxjanB5WldkcGMzUnllWEJoYzNOM2IzSmsiLCJlbWFpbCI6InJlZ2lzdHJ5QGV4YW1wbGUuY29tIn19fQ==
---
# OAuth and External Service Secrets
apiVersion: v1
kind: Secret
metadata:
  name: {{PROJECT_NAME}}-oauth-secrets
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
    secret-type: oauth
  annotations:
    description: "OAuth and external service credentials for {{PROJECT_NAME}}"
type: Opaque
data:
  # GitHub OAuth
  github-client-id: Z2l0aHViLWNsaWVudC1pZA==
  github-client-secret: Z2l0aHViLWNsaWVudC1zZWNyZXQ=
  
  # Google OAuth
  google-client-id: Z29vZ2xlLWNsaWVudC1pZA==
  google-client-secret: Z29vZ2xlLWNsaWVudC1zZWNyZXQ=
  
  # AWS Credentials
  aws-access-key-id: QVdTX0FDQ0VTU19LRVlfSUQ=
  aws-secret-access-key: QVdTX1NFQ1JFVF9BQ0NFU1NfS0VZ
  aws-region: dXMtZWFzdC0x
  
  # Stripe Keys
  stripe-publishable-key: c3RyaXBlLXB1Ymxpc2hhYmxlLWtleQ==
  stripe-secret-key: c3RyaXBlLXNlY3JldC1rZXk=
  stripe-webhook-secret: c3RyaXBlLXdlYmhvb2stc2VjcmV0
  
  # SendGrid API Key
  sendgrid-api-key: c2VuZGdyaWQtYXBpLWtleQ==
  
  # Twilio Credentials
  twilio-account-sid: dHdpbGlvLWFjY291bnQtc2lk
  twilio-auth-token: dHdpbGlvLWF1dGgtdG9rZW4=
---
# Monitoring and Observability Secrets
apiVersion: v1
kind: Secret
metadata:
  name: {{PROJECT_NAME}}-monitoring-secrets
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
    secret-type: monitoring
  annotations:
    description: "Monitoring and observability secrets for {{PROJECT_NAME}}"
type: Opaque
data:
  # Datadog API Key
  datadog-api-key: ZGF0YWRvZy1hcGkta2V5
  datadog-app-key: ZGF0YWRvZy1hcHAta2V5
  
  # New Relic License Key
  newrelic-license-key: bmV3cmVsaWMtbGljZW5zZS1rZXk=
  
  # Sentry DSN
  sentry-dsn: aHR0cHM6Ly9leGFtcGxlQGluZ2VzdC5zZW50cnkuaW8vMTIzNDU2
  
  # Prometheus Remote Write
  prometheus-remote-write-username: cHJvbWV0aGV1cy11c2VybmFtZQ==
  prometheus-remote-write-password: cHJvbWV0aGV1cy1wYXNzd29yZA==
---
# Backup and Storage Secrets
apiVersion: v1
kind: Secret
metadata:
  name: {{PROJECT_NAME}}-backup-secrets
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
    secret-type: backup
  annotations:
    description: "Backup and storage secrets for {{PROJECT_NAME}}"
type: Opaque
data:
  # S3 Backup Credentials
  s3-backup-access-key: czMtYmFja3VwLWFjY2Vzcy1rZXk=
  s3-backup-secret-key: czMtYmFja3VwLXNlY3JldC1rZXk=
  s3-backup-bucket: czMtYmFja3VwLWJ1Y2tldA==
  
  # Encryption Keys for Backups
  backup-encryption-key: YmFja3VwLWVuY3J5cHRpb24ta2V5LTMyLWNoYXJz
  
  # GCS Backup Service Account
  gcs-service-account-json: eyJ0eXBlIjoic2VydmljZV9hY2NvdW50IiwicHJvamVjdF9pZCI6InByb2plY3QtaWQifQ==
---
# External Secret Store Integration (Example with External Secrets Operator)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: {{PROJECT_NAME}}-secret-store
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
  annotations:
    description: "External secret store configuration for {{PROJECT_NAME}}"
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-east-1
      auth:
        secretRef:
          accessKeyID:
            name: {{PROJECT_NAME}}-aws-credentials
            key: access-key-id
          secretAccessKey:
            name: {{PROJECT_NAME}}-aws-credentials
            key: secret-access-key
---
# External Secret for Database Password
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{PROJECT_NAME}}-db-external-secret
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: {{PROJECT_NAME}}-secret-store
    kind: SecretStore
  target:
    name: {{PROJECT_NAME}}-db-password
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        password: "{{ .password }}"
  data:
  - secretKey: password
    remoteRef:
      key: {{PROJECT_NAME}}/database
      property: password
---
# Service Account Token Secret
apiVersion: v1
kind: Secret
metadata:
  name: {{PROJECT_NAME}}-sa-token
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
    secret-type: service-account
  annotations:
    description: "Service account token for {{PROJECT_NAME}}"
    kubernetes.io/service-account.name: {{PROJECT_NAME}}-service-account
type: kubernetes.io/service-account-token
