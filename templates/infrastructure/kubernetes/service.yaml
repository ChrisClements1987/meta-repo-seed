# {{PROJECT_NAME}} Kubernetes Services
# Service definitions for internal and external communication
# Includes ClusterIP, LoadBalancer, and headless services

# Main Application Service (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: {{PROJECT_NAME}}-service
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    component: app
    project: {{PROJECT_NAME}}
    service-type: application
  annotations:
    description: "{{PROJECT_NAME}} main application service"
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: ClusterIP
  selector:
    app: {{PROJECT_NAME}}
    component: app
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 8080
    targetPort: 8080
    protocol: TCP
  sessionAffinity: None
---
# Load Balancer Service for External Access
apiVersion: v1
kind: Service
metadata:
  name: {{PROJECT_NAME}}-loadbalancer
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    component: app
    project: {{PROJECT_NAME}}
    service-type: loadbalancer
  annotations:
    description: "{{PROJECT_NAME}} external load balancer service"
    # AWS Load Balancer Controller annotations
    service.beta.kubernetes.io/aws-load-balancer-type: "external"
    service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: "ip"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: "HTTP"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval-seconds: "30"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout-seconds: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthy-threshold-count: "2"
    service.beta.kubernetes.io/aws-load-balancer-unhealthy-threshold-count: "2"
    # Security annotations
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
spec:
  type: LoadBalancer
  selector:
    app: {{PROJECT_NAME}}
    component: app
  ports:
  - name: http
    port: 80
    targetPort: 8000
    protocol: TCP
  - name: https
    port: 443
    targetPort: 8000
    protocol: TCP
  sessionAffinity: None
  # Preserve client IP
  externalTrafficPolicy: Local
---
# Headless Service for StatefulSet (if needed)
apiVersion: v1
kind: Service
metadata:
  name: {{PROJECT_NAME}}-headless
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    component: app
    project: {{PROJECT_NAME}}
    service-type: headless
  annotations:
    description: "{{PROJECT_NAME}} headless service for direct pod communication"
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: {{PROJECT_NAME}}
    component: app
  ports:
  - name: http
    port: 8000
    targetPort: 8000
    protocol: TCP
  - name: metrics
    port: 8080
    targetPort: 8080
    protocol: TCP
---
# NodePort Service for Development/Testing
apiVersion: v1
kind: Service
metadata:
  name: {{PROJECT_NAME}}-nodeport
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    component: app
    project: {{PROJECT_NAME}}
    service-type: nodeport
    environment: development
  annotations:
    description: "{{PROJECT_NAME}} NodePort service for development access"
spec:
  type: NodePort
  selector:
    app: {{PROJECT_NAME}}
    component: app
  ports:
  - name: http
    port: 80
    targetPort: 8000
    nodePort: 30080
    protocol: TCP
  - name: metrics
    port: 8080
    targetPort: 8080
    nodePort: 30880
    protocol: TCP
---
# Service Monitor for Prometheus (if using Prometheus Operator)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{PROJECT_NAME}}-metrics
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
    monitoring: prometheus
spec:
  selector:
    matchLabels:
      app: {{PROJECT_NAME}}
      component: app
  endpoints:
  - port: metrics
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - {{PROJECT_NAME}}
---
# ExternalName Service for Database (if external)
apiVersion: v1
kind: Service
metadata:
  name: {{PROJECT_NAME}}-database
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    component: database
    project: {{PROJECT_NAME}}
    service-type: external
  annotations:
    description: "{{PROJECT_NAME}} external database service"
spec:
  type: ExternalName
  externalName: {{PROJECT_NAME}}-db.cluster-xxxx.us-east-1.rds.amazonaws.com
  ports:
  - name: mysql
    port: 3306
    protocol: TCP
---
# Service for Redis Cache (if using Redis)
apiVersion: v1
kind: Service
metadata:
  name: {{PROJECT_NAME}}-redis
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    component: cache
    project: {{PROJECT_NAME}}
    service-type: cache
  annotations:
    description: "{{PROJECT_NAME}} Redis cache service"
spec:
  type: ClusterIP
  selector:
    app: {{PROJECT_NAME}}
    component: redis
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
---
# Service Account for Service Mesh (if using Istio)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{PROJECT_NAME}}-service-mesh
  namespace: {{PROJECT_NAME}}
  labels:
    app: {{PROJECT_NAME}}
    project: {{PROJECT_NAME}}
  annotations:
    description: "Service account for {{PROJECT_NAME}} service mesh integration"
automountServiceAccountToken: true
