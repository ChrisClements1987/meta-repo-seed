# Google Cloud Infrastructure for {{PROJECT_NAME}}
# Generated by Meta-Repo Seeding System

# Create VPC Network
resource "google_compute_network" "main" {
  name                    = "vpc-{{PROJECT_NAME}}-${var.environment}"
  auto_create_subnetworks = false
  
  project = var.gcp_project_id
}

# Create Subnet
resource "google_compute_subnetwork" "main" {
  name          = "subnet-{{PROJECT_NAME}}-${var.environment}"
  ip_cidr_range = "10.0.0.0/24"
  region        = var.gcp_region
  network       = google_compute_network.main.id
  
  project = var.gcp_project_id
}

# Create Firewall Rules
resource "google_compute_firewall" "allow_http" {
  name    = "fw-allow-http-{{PROJECT_NAME}}-${var.environment}"
  network = google_compute_network.main.name
  project = var.gcp_project_id

  allow {
    protocol = "tcp"
    ports    = ["80", "443"]
  }

  source_ranges = ["0.0.0.0/0"]
  target_tags   = ["{{PROJECT_NAME}}-web"]
}

resource "google_compute_firewall" "allow_ssh" {
  name    = "fw-allow-ssh-{{PROJECT_NAME}}-${var.environment}"
  network = google_compute_network.main.name
  project = var.gcp_project_id

  allow {
    protocol = "tcp"
    ports    = ["22"]
  }

  source_ranges = var.allowed_cidr_blocks
  target_tags   = ["{{PROJECT_NAME}}-ssh"]
}

# Create GKE Cluster (recommended for production)
resource "google_container_cluster" "main" {
  count = var.enable_gke ? 1 : 0

  name     = "gke-{{PROJECT_NAME}}-${var.environment}"
  location = var.gcp_region
  project  = var.gcp_project_id

  # We can't create a cluster with no node pool defined, but we want to only use
  # separately managed node pools. So we create the smallest possible default
  # node pool and immediately delete it.
  remove_default_node_pool = true
  initial_node_count       = 1

  network    = google_compute_network.main.name
  subnetwork = google_compute_subnetwork.main.name

  # Enable network policy
  network_policy {
    enabled  = true
    provider = "CALICO"
  }

  # Enable IP aliasing
  ip_allocation_policy {}

  # Master auth networks
  master_auth {
    client_certificate_config {
      issue_client_certificate = false
    }
  }
}

# Create GKE Node Pool
resource "google_container_node_pool" "main" {
  count = var.enable_gke ? 1 : 0

  name       = "np-{{PROJECT_NAME}}-${var.environment}"
  location   = var.gcp_region
  cluster    = google_container_cluster.main[0].name
  node_count = var.gke_node_count
  project    = var.gcp_project_id

  node_config {
    preemptible  = var.environment == "dev" ? true : false
    machine_type = var.gke_machine_type

    # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.
    service_account = google_service_account.main.email
    oauth_scopes = [
      "https://www.googleapis.com/auth/cloud-platform"
    ]

    labels = {
      environment = var.environment
      project     = "{{PROJECT_NAME}}"
    }

    tags = ["{{PROJECT_NAME}}-node"]
  }

  management {
    auto_repair  = true
    auto_upgrade = true
  }
}

# Create Service Account for nodes
resource "google_service_account" "main" {
  account_id   = "sa-{{PROJECT_NAME}}-${var.environment}"
  display_name = "Service Account for {{PROJECT_NAME}} ${var.environment}"
  project      = var.gcp_project_id
}

# Create Cloud SQL Database (optional)
resource "google_sql_database_instance" "main" {
  count = var.enable_database ? 1 : 0

  name             = "db-{{PROJECT_NAME}}-${var.environment}"
  database_version = "POSTGRES_13"
  region           = var.gcp_region
  project          = var.gcp_project_id

  deletion_protection = var.environment == "production"

  settings {
    tier = var.database_tier

    backup_configuration {
      enabled                        = true
      start_time                     = "02:00"
      point_in_time_recovery_enabled = true
    }

    ip_configuration {
      ipv4_enabled = true
      require_ssl  = true
    }

    database_flags {
      name  = "log_checkpoints"
      value = "on"
    }
  }
}

# Create Database
resource "google_sql_database" "main" {
  count = var.enable_database ? 1 : 0

  name     = "{{PROJECT_NAME}}"
  instance = google_sql_database_instance.main[0].name
  project  = var.gcp_project_id
}

# Create Database User
resource "google_sql_user" "main" {
  count = var.enable_database ? 1 : 0

  name     = "{{PROJECT_NAME}}_user"
  instance = google_sql_database_instance.main[0].name
  password = var.database_password
  project  = var.gcp_project_id
}

# Create Cloud Storage Bucket
resource "google_storage_bucket" "main" {
  name     = "bucket-{{PROJECT_NAME}}-${var.environment}-${random_string.bucket_suffix.result}"
  location = var.gcp_region
  project  = var.gcp_project_id

  uniform_bucket_level_access = true

  lifecycle_rule {
    condition {
      age = 30
    }
    action {
      type = "Delete"
    }
  }

  versioning {
    enabled = var.environment == "production"
  }
}

resource "random_string" "bucket_suffix" {
  length  = 8
  special = false
  upper   = false
}

# Outputs
output "network_name" {
  value = google_compute_network.main.name
}

output "gke_cluster_name" {
  value = var.enable_gke ? google_container_cluster.main[0].name : null
}

output "gke_cluster_endpoint" {
  value     = var.enable_gke ? google_container_cluster.main[0].endpoint : null
  sensitive = true
}

output "database_connection_name" {
  value     = var.enable_database ? google_sql_database_instance.main[0].connection_name : null
  sensitive = true
}

output "storage_bucket_name" {
  value = google_storage_bucket.main.name
}
